<#@ template language="C#" debug="True" hostSpecific="True"                           #>
<#@ output extension=".generated.cs"                                                  #>
<#@ include file="$(LinqToDBT4SqlServerTemplatesPath)LinqToDB.SqlServer.Tools.ttinclude" #>
<#@ include file="$(LinqToDBT4SqlServerTemplatesPath)PluralizationService.ttinclude"     #>
<# //@ include file="$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.Tools.ttinclude" #>
<# //@ include file="$(ProjectDir)LinqToDB.Templates\PluralizationService.ttinclude"     #>
<#
	/*
		1. Create new *.tt file (e.g. MyDatabase.tt) in a folder where you would like to generate your data model
		   and copy content from this file to it. For example:

			MyProject
				DataModels
					MyDatabase.tt

		2. Modify the connection settings below to connect to your database.

		3. Add connection string to theappsettings.json file:

			"ConnectionStrings": {
              "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=aspnet-LINQ2DB_MVC_Core_5;Trusted_Connection=True;MultipleActiveResultSets=true"
            }

		4. To access your database use the following code:

			using (var db = new MyDatabaseDB())
			{
				var q =
					from c in db.Customers
					select c;

				foreach (var c in q)
					Console.WriteLine(c.ContactName);
			}

		5. See more at https://linq2db.github.io/articles/T4.html

		If you need to use the Microsoft.SqlServer.Types namespace, install the Microsoft.SqlServer.Types nuget,
		and replace the following include at the top of this file:

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.Tools.ttinclude"

		with

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.SqlTypes.Tools.ttinclude"

		IMPORTANT: if running .tt file gives you error like this:
		"error : Failed to resolve include text for file: C:\...\$(LinqToDBT4<SOME_DB>TemplatesDirectory)LinqToDB.<DB_NAME>.Tools.ttinclude"
		check tt file properties.
		Custom tool must be set to TextTemplatingFileGenerator, not TextTemplatingFilePreprocessor or any other value.
	*/

	NamespaceName = "LINQ2DB_MVC_Core_5.DB";

	/* Data context configuration */
    // (string) Name of base class for generated data context class.
    // Default: LinqToDB.Data.DataConnection.
    BaseDataContextClass           = "LinqToDB.Data.DataConnection";
    // (string) Name of data context class.
    // Default: <DATABASE_NAME> + "DB"
    DataContextName                = "LinqDB";
    // Enables generation of constructors for data context class.
    // Disabling could be usefull if you need to have custom implementation
    // of constructors in partial class
    GenerateConstructors          = true;               // Enforce generating DataContext constructors.
    // (string) Defines name of default configuration to use with default data context constructor
    DefaultConfiguration          = null;

	/* Schemas configuration */
    // Enables generation of mappings for each schema in separate type
    GenerateSchemaAsType            = false;
    // Contains mapping of schema name to corresponding schema class name
    // By default is empty and class name generated from schema name
    // Requires GenerateSchemaAsType=true set
    //SchemaNameMapping               = Dictionary<string,string>();
    // Suffix, added to schema class name
    // Requires GenerateSchemaAsType=true set
    SchemaNameSuffix                = "Schema";
    // Name of data context class for schema.
    // Requires GenerateSchemaAsType=true set
    SchemaDataContextTypeName       = "DataContext";

    /* Table mappings configuration */
    // (string) Specify base class (or comma-separated list of class and/or interfaces) for table mappings
    //BaseEntityClass               = null;
    // Enables generation of TableAttribute.Database property using database name, returned by schema loader
    //GenerateDatabaseName          = false;
    // Enables generation of TableAttribute.Database property with provided name value.
    // (string) If set, overrides GenerateDatabaseName behavior
    //DatabaseName                  = null;
    // Enables generation of TableAttribute.Schema property for default schema
    IncludeDefaultSchema          = false;
    // Enables generation of mappings for views
    GenerateViews                 = true;

    /* Columns comfiguration */
    // Enables compact generation of column properties
    IsCompactColumns              = true;
    // Enables compact generation of aliased column properties
    IsCompactColumnAliases              = true;
    // Enables generation of DataType, Length, Precision and Scale properties of ColumnAttribute.
    // Could be overriden (except DataType) by options below
    GenerateDataTypes                   = false;
    // (boolean) Enables or disables generation of ColumnAttribute.Length property.
    // If null, GenerateDataTypes value is used
    GenerateLengthProperty              = null;
    // (boolean) Enables or disables generation of ColumnAttribute.Precision property.
    // If null, GenerateDataTypes value is used
    GeneratePrecisionProperty           = null;
    // (boolean) Enables or disables generation of ColumnAttribute.Scale property.
    // If null, GenerateDataTypes value is used
    GenerateScaleProperty               = null;
    // Enables generation of ColumnAttribute.DbType property.
    GenerateDbTypes                     = false;
    // Enables generation of ObsoleteAttribute for column aliases
    GenerateObsoleteAttributeForAliases = false;

    /* Associations configuration */
    // Defines type template for one-to-many association, when it is generated as a member of table mapping.
    // Some other options: "{0}[]", "List<{0}>".
    OneToManyAssociationType      = "IEnumerable<{0}>";
    // Enables generation of associations in table mappings
    GenerateAssociations          = true;
    // Enables generation of back side of association. Applies to both table mapping members and extension
    // associations
    GenerateBackReferences        = true;
    // Enables generation of associations as extension methods for related table mapping classes
    GenerateAssociationExtensions = false;
//    // Defines method to generate name for "one" side of association
//    Func<ForeignKey, string> GetAssociationExtensionSinglularName
//        = GetAssociationExtensionSinglularNameDefault;
    // Defines method to generate name for "many" side of association
    Func<ForeignKey, string> GetAssociationExtensionPluralName
        = GetAssociationExtensionPluralNameDefault;

    /* Procedures and functions configuration */
    // Enables use of existing table mappings for procedures and functions that return same results as
    // defined by mapping
    ReplaceSimilarTables          = true;
    // If enabled, procedure schema load error will be generated as #error directive and fail build
    // of output file. Useful for initial generation to highlight places, that require review or
    // additional hints for schema loader
    // Also check GetSchemaOptions.LoadProcedure option above
    GenerateProcedureErrors       = true;

    /* Other generated functionality */
    // Enables generation of Find(pk fields) extension methods for record selection by primary key value
    GenerateFindExtensions        = true;

    /* Pluralization services */
    // Enables pluralization of table mapping classes
    PluralizeClassNames                 = false;
    // Enables singularization of table mapping classes
    SingularizeClassNames               = false;
    // Enables pluralization of ITable<> properties in data context
    PluralizeDataContextPropertyNames   = false;
    // Enables singularization of ITable<> properties in data context
    SingularizeDataContextPropertyNames = false;

    /* Naming configuration */
    // Enables normalization of of type and member names.
    // Default normalization removes underscores and capitalize first letter.
    // Could be overriden using ToValidName option below.
    NormalizeNames                                 = false;
    // Defines logic to convert type/member name, derived from database object name, to C# identifier.
    Func<string, bool, string> ToValidName         = ToValidNameDefault;
    // Makes C# identifier valid by removing unsupported symbols and calling ToValidName
    Func<string, bool, string> ConvertToCompilable = ConvertToCompilableDefault;

	//GetSchemaOptions.ExcludedSchemas = new[] { "TestUser", "SYSSTAT" }; // Defines excluded schemas.
	//GetSchemaOptions.IncludedSchemas = new[] { "TestUser", "SYS" };     // Defines only included schemas.

    // Enables loading of tables and views information
    GetSchemaOptions.GetTables             = true;
    // Enables loading of functions and procedures information
    GetSchemaOptions.GetProcedures         = true;
    // Enables use of System.Char type in generated model for text types
    // with length 1 instead of System.String
    GetSchemaOptions.GenerateChar1AsString = false;

    // Custom filter for table/view schema load
    // Can be used to exclude views or tables from generation based in their descriptor.
    // This filter especially usefull, when you wan't to exclude table, referenced by other generated
    // tables using associations, or by procedures using excluded table as result. Doing it in filter
    // will automatically prevent associations generation and will trigger generation of procedure-specific
    // result classes.
    // LoadTableData type:
    // https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/SchemaProvider/LoadTableData.cs
    GetSchemaOptions.LoadTable = (LoadTableData poTable) => {
        var ignoredTableList = new HashSet<string>() {
                "__EFMigrationsHistory", "AspNetRoleClaims", "AspNetRoles", "AspNetUserClaims"
                , "AspNetUserLogins", "AspNetUserRoles"
                , "AspNetUsers", "AspNetUserTokens"
        };

        return !ignoredTableList.Contains(poTable.Name);
    };

    // Custom filter for procedure/function result schema loader.
    // Can be used to exclude schema load for functions, that generate error during schema load
    // Also check GenerateProcedureErrors option below
    // ProcedureSchema type:
    // https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/SchemaProvider/ProcedureSchema.cs
    GetSchemaOptions.LoadProcedure     = (ProcedureSchema p) => true;

    // type: Func<ForeignKeySchema, string>
    // Defines custom association naming logic
    // https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/SchemaProvider/ForeignKeySchema.cs
    GetSchemaOptions.GetAssociationMemberName = null;

    // Procedures load progress reporting callback
    // Not applicable for T4 templates
    //GetSchemaOptions.ProcedureLoadingProgress = (int total, int current) => {};

	// to configure GetSchemaOptions properties, add them here, before load metadata call

	string connectionString = "Server=(localdb)\\mssqllocaldb;Database=aspnet-LINQ2DB_MVC_Core_5;Trusted_Connection=True;MultipleActiveResultSets=true";
//	LoadSqlServerMetadata("MyServer", "MyDatabase", "User", "Password");
//	LoadSqlServerMetadata(".", "MyDatabase"); // Integrated Security
	LoadSqlServerMetadata(connectionString);

	// to adjust loaded database model before generation, add your code here, after load metadata, but before GenerateModel() call

	GenerateModel();
#>
